import {
	Ctx,
	Hears,
	InjectBot,
	Message,
	On,
	Start,
	Update
  } from 'nestjs-telegraf';
  import { Telegraf } from 'telegraf';
  import { actionButtons, priorityButtons  } from './app.buttons';
  import { AppService } from './app.service';
  import { showList } from './app.utils';
  import { Context } from './context.interface';
  import { PrismaService } from './prisma.service';
import { Priority } from '@prisma/client';
  
  @Update()
  export class AppUpdate {
	constructor(
	  @InjectBot() private readonly bot: Telegraf<Context>,
	  private readonly appService: AppService,
	  private readonly prisma: PrismaService
	) {}
  
	@Start()
	async startCommand(@Message('text') message: string, @Ctx() ctx: Context) {
	  if (!ctx.session.token) {
		console.log('–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω...');
		await ctx.reply('–ü—Ä–∏–≤–µ—Ç –¥—Ä—É–≥, –≤–≤–µ–¥–∏ —Å–≤–æ–π –∫–ª—é—á! üëã');
		ctx.session.type = 'token';
	  } else {
		console.log('–¢–æ–∫–µ–Ω —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...');
		const user = await this.prisma.user.findFirst({
		  where: { token: ctx.session.token },
		});
  
		if (!user) {
		  console.log('–¢–æ–∫–µ–Ω –±–æ–ª—å—à–µ –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω.');
		  ctx.session.token = null; // –°–±—Ä–æ—Å —Ç–æ–∫–µ–Ω–∞
		  ctx.session.type = 'token';
		  await ctx.reply('–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ–ª—å—à–µ –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω. –í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –∫–ª—é—á! üëã');
		} else {
		  ctx.session.userId = user.id; // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω
		  await ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω, –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å –∑–∞–¥–∞—á–∞–º–∏.', actionButtons());
		  await ctx.reply('–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?', actionButtons());
		}
	  }
	}
  
	@Hears('‚ö°Ô∏è –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É')
	async createTask(ctx: Context) {
	  if (!ctx.session.userId) {
		await ctx.reply('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É!');
		return;
	  }
	  ctx.session.type = 'create';
	  await ctx.reply('–û–ø–∏—à–∏ –∑–∞–¥–∞—á—É: ');
	}
  
	@Hears('üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á')
	async listTask(ctx: Context) {
	  const userId = ctx.session.userId;
  
	  if (!userId) {
		await ctx.reply('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á!');
		return;
	  }
  
	  const todos = await this.appService.getAll(userId);
	  await ctx.reply(showList(todos));
	}
  
	@Hears('‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å')
	async doneTask(ctx: Context) {
	  if (!ctx.session.userId) {
		await ctx.reply('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É!');
		return;
	  }
  
	  ctx.session.type = 'done';
	  await ctx.deleteMessage();
	  await ctx.reply('–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: ');
	}
  
	@Hears('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ')
	async editTask(ctx: Context) {
	  if (!ctx.session.userId) {
		await ctx.reply('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è, —á—Ç–æ–±—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É!');
		return;
	  }
  
	  ctx.session.type = 'edit';
	  await ctx.deleteMessage();
	  await ctx.replyWithHTML(
		'–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: \n\n' +
		'–í —Ñ–æ—Ä–º–∞—Ç–µ - <b>1 | –ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ</b>'
	  );
	}
  
	@Hears('‚ùå –£–¥–∞–ª–µ–Ω–∏–µ')
	async deleteTask(ctx: Context) {
	  if (!ctx.session.userId) {
		await ctx.reply('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É!');
		return;
	  }
  
	  ctx.session.type = 'remove';
	  await ctx.deleteMessage();
	  await ctx.reply('–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: ');
	}
  
	@On('text')
	async getText(@Message('text') message: string, @Ctx() ctx: Context) {
	  if (ctx.session.type === 'token') {
		console.log('–ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–º—É —Ç–æ–∫–µ–Ω—É...', message);
  
		const user = await this.prisma.user.findFirst({ where: { token: message } });
  
		if (!user) {
		  console.log('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω');
		  await ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.');
		  return;
		}
  
		ctx.session.userId = user.id;
		ctx.session.token = message; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω
		ctx.session.type = ''; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∏–ø —Å–µ—Å—Å–∏–∏
  
		console.log('–¢–æ–∫–µ–Ω –≤–µ—Ä–Ω—ã–π! –°–µ—Å—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —Å userId:', user.id);
		await ctx.reply(`–¢–æ–∫–µ–Ω –≤–µ—Ä–Ω—ã–π! –£–∂–µ –∑–∞–ø–∏—Å–∞–ª –µ–≥–æ, —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã!`, actionButtons());
		await ctx.reply('–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?', actionButtons());
		return;
	  }
  
	  const userId = ctx.session.userId;


	  if (!userId) {
		await ctx.reply('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è, —á—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∑–∞–¥–∞—á–∞–º–∏!');
		return;
	  }
  
	  switch (ctx.session.type) {
		case 'create': {
			ctx.session.taskName = message;
			ctx.session.type = 'create_priority';
			await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏:', priorityButtons());
			break;
		  }
		  case 'create_priority': {
			const priority = message.trim() as Priority;
			ctx.session.taskPriority = priority;
			ctx.session.type = 'create_deadline';
			await ctx.reply('–£–∫–∞–∂–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –∑–∞–¥–∞—á–∏ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD): ');
			break;
		  }
		  case 'create_deadline': {
			const deadline = new Date(message.trim());
			const todos = await this.appService.createTask(ctx.session.taskName, ctx.session.taskPriority, deadline, userId);
			await ctx.reply(showList(todos));
			break;
		  }
		case 'done': {
		  const taskName = message.trim();
		  const todos = await this.appService.doneTask(taskName, userId);
  
		  if (!todos) {
			await ctx.deleteMessage();
			await ctx.reply('–ó–∞–¥–∞—á–∏ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!');
			return;
		  }
  
		  await ctx.reply(showList(todos));
		  break;
		}
		case 'edit': {
		  const [taskName, newtaskName] = message.split(' | ').map((str) => str.trim());
		  const todos = await this.appService.editTask(taskName, newtaskName, userId);
  
		  if (!todos) {
			await ctx.deleteMessage();
			await ctx.reply('–ó–∞–¥–∞—á–∏ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!');
			return;
		  }
  
		  await ctx.reply(showList(todos));
		  break;
		}
		case 'remove': {
		  const taskId = message.trim();
		  const todos = await this.appService.deleteTask(taskId, userId);
  
		  if (!todos) {
			await ctx.deleteMessage();
			await ctx.reply('–ó–∞–¥–∞—á–∏ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!');
			return;
		  }
  
		  await ctx.reply(showList(todos));
		  break;
		}
		default: {
		  await ctx.reply('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–µ—Å—Å–∏–∏.');
		  break;
		}
	  }
	}
  }